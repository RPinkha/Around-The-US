!function(){"use strict";class e{constructor(e,t,s,i,r){this._name=e.name,this._link=e.link,this._id=e._id,this.isLiked=e.isLiked,this._cardSelector=t,this._handleImageClick=s,this._handleDeleteClick=i,this._handleLikeClick=r}getId(){return this._id}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}_setEventListeners(){this._imageElement.addEventListener("click",(()=>{this._handleImageClick(this._name,this._link)})),this._likeButton.addEventListener("click",(()=>{this._handleLikeClick(this)})),this._trashButton.addEventListener("click",(()=>{this._handleDeleteClick(this)}))}deleteCard(){this._element.remove(),this._element=null}toggleLikeCard(e){this.isLiked=e,this.renderLikeCard()}renderLikeCard(){this.isLiked?this._likeButton.classList.add("card__like-button_active"):this._likeButton.classList.remove("card__like-button_active")}generateCard(){return this._element=this._getTemplate(),this._imageElement=this._element.querySelector(".card__image"),this._likeButton=this._element.querySelector(".card__like-button"),this._trashButton=this._element.querySelector(".card__trash-button"),this._setEventListeners(),this._imageElement.setAttribute("src",this._link),this._imageElement.setAttribute("alt",this._name),this._element.querySelector(".card__title").textContent=this._name,this.renderLikeCard(),this._element}}class t{constructor(e,t){let{items:s,renderer:i}=e;this._items=s,this._renderer=i,this._container=document.querySelector(t)}rendererItems=()=>{this._items.reverse().forEach((e=>{this.addItem(this._renderer(e))}))};addItem=e=>{this._container.prepend(e)}}class s{constructor(e,t){let{inputSelector:s,submitButtonSelector:i,inactiveButtonClass:r,inputErrorClass:n,errorClass:o}=t;this._formElement=e,this._inputSelector=s,this._submitButtonSelector=i,this._inactiveButtonClass=r,this._inputErrorClass=n,this._errorClass=o,this._inputList=Array.from(this._formElement.querySelectorAll(this._inputSelector)),this._buttonElement=this._formElement.querySelector(this._submitButtonSelector)}_showInputError=e=>{e.classList.add(this._inputErrorClass),this._errorElement.textContent=e.validationMessage,this._errorElement.classList.add(this._errorClass)};_hideInputError=e=>{e.classList.remove(this._inputErrorClass),this._errorElement.classList.remove(this._errorClass),this._errorElement.textContent=""};_checkInputValidity=e=>{this._errorElement=this._formElement.querySelector(`#${e.id}-error`),e.validity.valid?this._hideInputError(e):this._showInputError(e)};_hasInvalidInput=e=>e.some((e=>!e.validity.valid));_toggleButtonState=e=>{this._hasInvalidInput(e)?this.disableSubmit():(this._buttonElement.classList.remove(this._inactiveButtonClass),this._buttonElement.removeAttribute("disabled"))};_setEventListeners(){this._toggleButtonState(this._inputList),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState(this._inputList)}))}))}checkValidity(){this._inputList.forEach((e=>{this._checkInputValidity(e),this._toggleButtonState(this._inputList)}))}enableValidation(){this._setEventListeners()}disableSubmit(){this._buttonElement.classList.add(this._inactiveButtonClass),this._buttonElement.setAttribute("disabled",!0)}resetForm(){this._formElement.reset()}}class i{constructor(e){this._modalElement=document.querySelector(e)}open(){this._modalElement.classList.add("modal_opened"),document.addEventListener("keyup",this._handleEscClose)}close=()=>{this._modalElement.classList.remove("modal_opened"),document.removeEventListener("keyup",this._handleEscClose)};_handleEscClose=e=>{"Escape"===e.key&&this.close()};setEventListeners(){this._closeButton=this._modalElement.querySelector(".modal__close"),this._closeButton.addEventListener("click",this.close),this._modalElement.addEventListener("mousedown",(e=>{e.target===e.currentTarget&&this.close()}))}}class r extends i{constructor(e,t,s){let{formSelector:i,submitButtonSelector:r}=s;super(e),this._form=this._modalElement.querySelector(i),this._formSubmit=t,this._button=this._modalElement.querySelector(r),this._originalButtonText=this._button.textContent,this._inputList=Array.from(this._form.querySelectorAll(".modal__input"))}renderSaving(e){this._button.textContent=e?"Saving...":this._originalButtonText}_getInputValues(){const e={};return this._inputList.forEach((t=>{e[t.name]=t.value})),e}setEventListeners(){this._form.addEventListener("submit",(e=>{e.preventDefault();const t=this._getInputValues();this._formSubmit(t)})),super.setEventListeners()}}const n={inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_active",formSelector:".modal__form"},o=document.querySelector(".profile"),a=o.querySelector(".profile__edit-button"),l=o.querySelector(".profile__add-button"),c=o.querySelector(".profile__photo-button"),h=document.querySelector("#modal-profile-edit"),d=Array.from(h.querySelectorAll(".modal__input")),_=Array.from(document.querySelectorAll(n.formSelector)),u={};let m;const p=new class{constructor(e){let{nameSelector:t,descriptionSelector:s,avatarSelector:i}=e;this._nameElement=document.querySelector(t),this._descriptionElement=document.querySelector(s),this._avatarElement=document.querySelector(i)}getUserInfo(){const e={};return e.name=this._nameElement.textContent,e.description=this._descriptionElement.textContent,e}setUserInfo(e){this._nameElement.textContent=e.name,this._descriptionElement.textContent=e.description}setUserAvatar(e){this._avatarElement.setAttribute("src",e)}}({nameSelector:".profile__name",descriptionSelector:".profile__description",avatarSelector:".profile__photo"}),E=new class{constructor(e){this._baseUrl=e.baseUrl,this._headers=e.headers}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error :${e.status}`)}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{headers:this._headers}).then((e=>this._checkResponse(e)))}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then((e=>this._checkResponse(e)))}editProfile(e){let{name:t,description:s}=e;return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t,about:s})}).then((e=>this._checkResponse(e)))}addCard(e){let{name:t,link:s}=e;return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:s})}).then((e=>this._checkResponse(e)))}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then((e=>this._checkResponse(e)))}likeCard(e,t){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:t?"DELETE":"PUT",headers:this._headers}).then((e=>this._checkResponse(e)))}changeAvatar(e){let{link:t}=e;return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:t})}).then((e=>this._checkResponse(e)))}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"739decfe-71be-4d0d-8961-a71a0f6cba52","Content-Type":"application/json"}});function v(t){return new e(t,"#card",y,C,L).generateCard()}E.getUserInfo().then((e=>{p.setUserInfo({name:e.name,description:e.about}),p.setUserAvatar(e.avatar)})).catch((e=>console.log(e))),E.getInitialCards().then((e=>{m=new t({items:e,renderer:v},".cards__list"),m.rendererItems()})).catch((e=>console.log(e))),_.forEach((e=>{const t=new s(e,n),i=e.getAttribute("name");t.enableValidation(),u[i]=t}));const g=new class extends i{constructor(e,t){let{submitButtonSelector:s}=t;super(e),this._button=this._modalElement.querySelector(s),this._originalButtonText=this._button.textContent}renderSaving(e){this._button.textContent=e?"Saving...":this._originalButtonText}setCallback(e){this._callback=e}setEventListeners(){this._button.addEventListener("click",(()=>{this._callback()})),super.setEventListeners()}}("#modal-confirm-delete",n),S=new r("#modal-change-picture",(function(e){S.renderSaving(!0),E.changeAvatar(e).then((e=>{p.setUserAvatar(e.avatar)})).catch((e=>console.log(e))).finally(S.renderSaving(!1)),S.close()}),n),b=new r("#modal-profile-edit",(function(e){b.renderSaving(!0),E.editProfile(e).then((e=>{p.setUserInfo({name:e.name,description:e.about})})).catch((e=>console.log(e))).finally(b.renderSaving(!1)),b.close()}),n),f=new r("#modal-add-card",(function(e){f.renderSaving(!0),E.addCard(e).then((e=>{const t=v(e);m.addItem(t)})).catch((e=>console.log(e))).finally(f.renderSaving(!1)),u.addCardForm.resetForm(),u.addCardForm.disableSubmit(),f.close()}),n),k=new class extends i{constructor(e){super(e),this._previewImage=this._modalElement.querySelector(".modal__image"),this._previewImageTitle=this._modalElement.querySelector(".modal__image-title")}open(e){let{name:t,link:s}=e;this._previewImage.setAttribute("src",s),this._previewImage.setAttribute("alt",t),this._previewImageTitle.textContent=t,super.open()}}("#image-preview-modal");function C(e){g.open(),g.setCallback((()=>{E.deleteCard(e.getId()).catch((e=>console.log(e))),e.deleteCard(),g.close()}))}function L(e){E.likeCard(e.getId(),e.isLiked).then((t=>e.toggleLikeCard(t.isLiked))).catch((e=>console.log(e)))}function y(e,t){k.open({name:e,link:t})}a.addEventListener("click",(()=>{!function(){const e=p.getUserInfo();d[0].value=e.name,d[1].value=e.description}(),u.profileForm.checkValidity(),b.open()})),l.addEventListener("click",(()=>f.open())),c.addEventListener("click",(()=>S.open())),b.setEventListeners(),f.setEventListeners(),k.setEventListeners(),S.setEventListeners(),g.setEventListeners()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,